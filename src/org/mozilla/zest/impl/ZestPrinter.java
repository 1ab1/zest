/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package org.mozilla.zest.impl;

import org.mozilla.zest.core.v1.ZestAction;
import org.mozilla.zest.core.v1.ZestActionFail;
import org.mozilla.zest.core.v1.ZestActionScan;
import org.mozilla.zest.core.v1.ZestAssertion;
import org.mozilla.zest.core.v1.ZestAuthentication;
import org.mozilla.zest.core.v1.ZestConditionRegex;
import org.mozilla.zest.core.v1.ZestConditional;
import org.mozilla.zest.core.v1.ZestHttpAuthentication;
import org.mozilla.zest.core.v1.ZestRequest;
import org.mozilla.zest.core.v1.ZestScript;
import org.mozilla.zest.core.v1.ZestStatement;
import org.mozilla.zest.core.v1.ZestTransformation;

public class ZestPrinter {

	private static String cleanStr(String str) {
		if (str != null) {
			return str;
		}
		return "";
	}
	
	public static void summary(ZestScript zs) {
		if (zs == null) {
			System.out.println("Null Zest script");
			return;
		}
		System.out.println("About:         " + zs.getAbout());
		System.out.println("Version:       " + zs.getZestVersion());
		System.out.println("Generated by:  " + cleanStr(zs.getGeneratedBy()));
		System.out.println("Author:        " + cleanStr(zs.getAuthor()));
		System.out.println("Title:         " + cleanStr(zs.getTitle()));
		System.out.println("Description:   " + cleanStr(zs.getDescription()));
		System.out.println("Prefix:        " + cleanStr(zs.getPrefix()));
		System.out.println("Tokens:");
		for (String [] tokens : zs.getTokens().getTokens()) {
			System.out.println("    " + tokens[0] + "=" + tokens[1]);
		}
		for (ZestAuthentication za : zs.getAuthentication()) {
			if (za instanceof ZestHttpAuthentication) {
				ZestHttpAuthentication zha = (ZestHttpAuthentication) za;
				System.out.println("HTTP Authentication:");
				printIndent(1);
				System.out.println("Site:      " + cleanStr(zha.getSite()));
				printIndent(1);
				System.out.println("Realm:     " + cleanStr(zha.getRealm()));
				printIndent(1);
				System.out.println("Username:  " + cleanStr(zha.getUsername()));
				printIndent(1);
				System.out.println("Password:  " + cleanStr(zha.getPassword()));
			} else {
				System.out.println("Authentication not supported: " + za.getElementType());
			}
		}
	}

	private static void printIndent(int indent) {
		printIndent(indent, -1);
	}

	private static void printIndent(int indent, int lineNumber) {
		if (lineNumber >= 0) {
			System.out.format("%3d:", lineNumber);
			
		} else {
			System.out.print("    ");
		}
		for (int i=0; i < indent; i++) {
			System.out.print("    ");
		}
	}

	public static void list(ZestStatement stmt, int indent) {
		if (stmt instanceof ZestRequest) {
			ZestRequest req = (ZestRequest)stmt;
			printIndent(indent, stmt.getIndex());
			System.out.println(req.getMethod() + " " + req.getUrl());
			if (req.getHeaders() != null && req.getHeaders().length() > 0) {
				printIndent(indent+1);
				System.out.println("Headers: " + req.getHeaders());
			}
			if (req.getData() != null && req.getData().length() > 0) {
				printIndent(indent+1);
				System.out.println("Data: " + req.getData());
			}
			for (ZestTransformation zt : req.getTransformations()) {
				printIndent(indent+1);
				System.out.println("Transform: " + zt.getElementType());
			}
			for (ZestAssertion za : req.getAssertions()) {
				printIndent(indent+1);
				System.out.println("Assert: " + za.getElementType());
			}
		} else if (stmt instanceof ZestConditional) {
			ZestConditional zc = (ZestConditional)stmt;
			printIndent(indent, stmt.getIndex());
			System.out.print("IF ");
			if (zc instanceof ZestConditionRegex) {
				ZestConditionRegex zcr = (ZestConditionRegex) zc;
				System.out.println("Regex: " + zcr.getLocation() + " " + zcr.getRegex());
			} else {
				System.out.println("(Unknown conditional: " + stmt.getElementType() + ")");
			}
			for (ZestStatement ifStmt : zc.getIfStatements()) {
				list(ifStmt, indent+1);
			}
			printIndent(indent);
			System.out.println("ELSE");
			for (ZestStatement elseStmt : zc.getElseStatements()) {
				list(elseStmt, indent+1);
			}
		} else if (stmt instanceof ZestAction) {
			ZestAction za = (ZestAction) stmt;
			printIndent(indent, stmt.getIndex());
			if (za instanceof ZestActionFail) {
				ZestActionFail zaf = (ZestActionFail)za;
				System.out.println("Fail " + zaf.getMessage());
			} else if (za instanceof ZestActionScan) {
				ZestActionScan zas = (ZestActionScan)za;
				System.out.println("Scan " + zas.getTargetParameter());
			}
		} else {
			printIndent(indent, stmt.getIndex());
			System.out.println("(Unknown: " + stmt.getElementType() + ")");
		}
		
	}

	public static void list(ZestScript zs) {
		summary(zs);
		
		if (zs != null) {
			System.out.println("Statements:");
			for (ZestStatement stmt : zs.getStatements()) {
				list(stmt, 1);
			}
		}
	}

}
